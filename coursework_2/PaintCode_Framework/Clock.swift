//
//  Clock.swift
//  cw2
//
//  Copyright Â© 2019 tz. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Clock : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 134, height: 95), resizing: ResizingBehavior = .aspectFit, timer: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 134, height: 95), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 134, y: resizedFrame.height / 95)


        //// Color Declarations
        let green = UIColor(red: 0.320, green: 0.800, blue: 0.506, alpha: 1.000)
        let red = UIColor(red: 0.800, green: 0.320, blue: 0.379, alpha: 1.000)
        let orange = UIColor(red: 0.883, green: 0.779, blue: 0.646, alpha: 1.000)
        let color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Variable Declarations
        let expression: CGFloat = -180 * timer
        let colour = timer < 0.33 ? red : (timer < 0.66 ? orange : green)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 23, y: 3, width: 88, height: 88))
        colour.setFill()
        ovalPath.fill()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 23.5, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 33.5, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 33.5, y: 57.5))
        bezier2Path.addLine(to: CGPoint(x: 37.5, y: 63.5))
        bezier2Path.addLine(to: CGPoint(x: 42.5, y: 70.5))
        bezier2Path.addLine(to: CGPoint(x: 50.5, y: 76.5))
        bezier2Path.addLine(to: CGPoint(x: 60.5, y: 81.5))
        bezier2Path.addLine(to: CGPoint(x: 71.5, y: 81.5))
        bezier2Path.addLine(to: CGPoint(x: 84.5, y: 76.5))
        bezier2Path.addLine(to: CGPoint(x: 93.5, y: 70.5))
        bezier2Path.addLine(to: CGPoint(x: 98.5, y: 63.5))
        bezier2Path.addLine(to: CGPoint(x: 101.5, y: 54.5))
        bezier2Path.addLine(to: CGPoint(x: 101.5, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 110.5, y: 46.5))
        bezier2Path.addLine(to: CGPoint(x: 110.5, y: 54.5))
        bezier2Path.addLine(to: CGPoint(x: 106.5, y: 63.5))
        bezier2Path.addLine(to: CGPoint(x: 98.5, y: 76.5))
        bezier2Path.addLine(to: CGPoint(x: 93.5, y: 81.5))
        bezier2Path.addLine(to: CGPoint(x: 84.5, y: 86.5))
        bezier2Path.addLine(to: CGPoint(x: 71.5, y: 90.5))
        bezier2Path.addLine(to: CGPoint(x: 60.5, y: 90.5))
        bezier2Path.addLine(to: CGPoint(x: 47.5, y: 86.5))
        bezier2Path.addLine(to: CGPoint(x: 33.5, y: 76.5))
        bezier2Path.addLine(to: CGPoint(x: 29.5, y: 70.5))
        bezier2Path.addLine(to: CGPoint(x: 26.5, y: 63.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 57.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 50.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 46.5))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 34, y: 14, width: 67, height: 67))
        UIColor.white.setFill()
        oval2Path.fill()
        UIColor.black.setStroke()
        oval2Path.lineWidth = 2.5
        oval2Path.stroke()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 67, y: 47)
        context.rotate(by: -(expression + 90) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -0.68, y: -44.29))
        bezierPath.addLine(to: CGPoint(x: -8.68, y: -31.29))
        bezierPath.addLine(to: CGPoint(x: -3.68, y: -31.29))
        bezierPath.addLine(to: CGPoint(x: -3.68, y: -1.29))
        bezierPath.addLine(to: CGPoint(x: 3.32, y: -1.29))
        bezierPath.addLine(to: CGPoint(x: 3.32, y: -31.29))
        bezierPath.addLine(to: CGPoint(x: 7.32, y: -31.29))
        bezierPath.addLine(to: CGPoint(x: -0.68, y: -44.29))
        bezierPath.close()
        UIColor.white.setFill()
        bezierPath.fill()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()

        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: -4, y: 35, width: 1, height: 1)
        let textTextContent = "Hello, World!"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.labelFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: 4, y: 61)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text2Rect = CGRect(x: 0, y: 0, width: 28, height: 18.6)
        let text2TextContent = "Start"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont(name: "AmericanTypewriter", size: 10)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Text 3 Drawing
        context.saveGState()
        context.translateBy(x: 134, y: 32)
        context.rotate(by: -270 * CGFloat.pi/180)

        let text3Rect = CGRect(x: 0, y: 0, width: 31, height: 28.6)
        let text3TextContent = "Finish"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont(name: "AmericanTypewriter", size: 10)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 59, y: 39, width: 16, height: 16))
        colour.setFill()
        oval3Path.fill()
        UIColor.black.setStroke()
        oval3Path.lineWidth = 2.5
        oval3Path.stroke()
        
        context.restoreGState()

    }




    @objc(ClockResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
