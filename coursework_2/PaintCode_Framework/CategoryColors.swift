//
//  CategoryColors.swift
//  tiz
//
//  Created by tiziano on 5/18/19.
//  Copyright Â© 2019 tz. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CategoryColors : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 161, height: 94), resizing: ResizingBehavior = .aspectFit, blueCategory: CGFloat = 0, greenCategory: CGFloat = 0, orangeCategory: CGFloat = 0, yellowCategory: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 161, height: 94), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 161, y: resizedFrame.height / 94)


        //// Color Declarations
        let orange_light = UIColor(red: 0.988, green: 0.498, blue: 0.384, alpha: 1.000)
        let blue = UIColor(red: 0.196, green: 0.251, blue: 0.361, alpha: 1.000)
        let yellow = UIColor(red: 1.000, green: 0.974, blue: 0.354, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 0.678, blue: 0.710, alpha: 1.000)
        let blue2_light = UIColor(red: 0.196, green: 0.251, blue: 0.361, alpha: 0.400)
        let orange_light_light = UIColor(red: 0.988, green: 0.498, blue: 0.384, alpha: 0.400)
        let yellow2_light = UIColor(red: 0.983, green: 0.967, blue: 0.590, alpha: 0.400)
        let green_light = UIColor(red: 0.000, green: 0.678, blue: 0.710, alpha: 0.400)
        let white = UIColor(red: 0.984, green: 1.000, blue: 0.948, alpha: 0.623)

        //// Variable Declarations
        let blueCategoryIncrement: CGFloat = 145 * blueCategory
        let greenCategoryIncrement: CGFloat = 145 * greenCategory
        let orangeCategoryIncrement4: CGFloat = 145 * orangeCategory
        let yellowCategoryIncrement3: CGFloat = 145 * yellowCategory

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 8, y: 8, width: 146, height: 13))
        blue2_light.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 8, y: 26, width: 146, height: 13))
        green_light.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 8, y: 46, width: 146, height: 13))
        yellow2_light.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 8, y: 68, width: 146, height: 13))
        orange_light_light.setFill()
        rectangle5Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 153.5, y: 14.5))
        blue.setStroke()
        bezierPath.lineWidth = 13
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [blueCategoryIncrement, 145])
        bezierPath.stroke()
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.5, y: 32.5))
        bezier3Path.addLine(to: CGPoint(x: 153.5, y: 32.5))
        green.setStroke()
        bezier3Path.lineWidth = 13
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [greenCategoryIncrement, 145])
        bezier3Path.stroke()
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9.5, y: 52.5))
        bezier4Path.addLine(to: CGPoint(x: 154.5, y: 52.5))
        yellow.setStroke()
        bezier4Path.lineWidth = 13
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [yellowCategoryIncrement3, 145])
        bezier4Path.stroke()
        context.restoreGState()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.5, y: 74.5))
        bezier5Path.addLine(to: CGPoint(x: 153.5, y: 74.5))
        orange_light.setStroke()
        bezier5Path.lineWidth = 13
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [orangeCategoryIncrement4, 145])
        bezier5Path.stroke()
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 8.5, y: 3.5))
        bezier6Path.addLine(to: CGPoint(x: 8.5, y: 86.5))
        UIColor.black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 64, y: 9, width: 39, height: 10)
        let textTextContent = "Amuse"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: white,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 68, y: 27, width: 30, height: 10)
        let text2TextContent = "Study"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: white,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 66, y: 47, width: 35, height: 10)
        let text3TextContent = "Health"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: green_light,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 66, y: 69, width: 32, height: 10)
        let text4TextContent = "Study"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: white,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(CategoryColorsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
