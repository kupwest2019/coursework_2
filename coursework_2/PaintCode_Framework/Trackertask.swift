//
//  Trackertask.swift
//  cw2
//
//  Created by tiziano on 5/15/19.
//  Copyright Â© 2019 tz. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Trackertask : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 164), resizing: ResizingBehavior = .aspectFit, failure: CGFloat = 1, achive: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 164), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 164)


        //// Color Declarations
        let colorFail = UIColor(red: 0.963, green: 0.004, blue: 0.004, alpha: 1.000)
        let colorFail2 = UIColor(red: 0.574, green: 0.000, blue: 0.000, alpha: 1.000)
        let greenPower = UIColor(red: 0.151, green: 0.823, blue: 0.565, alpha: 1.000)
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let gradientFail = CGGradient(colorsSpace: nil, colors: [colorFail.cgColor, colorFail2.cgColor] as CFArray, locations: [0, 1])!
        let gradientOK = CGGradient(colorsSpace: nil, colors: [UIColor.green.cgColor, UIColor.green.blended(withFraction: 0.5, of: greenPower).cgColor, greenPower.cgColor] as CFArray, locations: [0, 0, 1])!

        //// Variable Declarations
        let expr_failure: CGFloat = 302 * failure
        let expr_achive: CGFloat = 220 * achive
        let one = achive < 0.25 ? white : greenPower
        let two = achive < 0.5 ? white : greenPower
        let three = achive < 0.75 ? white : greenPower
        let four = achive < 0.98 ? white : greenPower

        //// Oval Drawing
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 30, y: 26, width: 111, height: 111))
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(gradientFail, start: CGPoint(x: 85.5, y: 26), end: CGPoint(x: 85.5, y: 137), options: [])
        context.restoreGState()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 43, y: 39, width: 85, height: 85))
        UIColor.white.setFill()
        oval2Path.fill()
        UIColor.black.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Oval 6 Drawing
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 43, y: 39, width: 85, height: 85))
        context.saveGState()
        oval6Path.addClip()
        context.drawLinearGradient(gradientOK, start: CGPoint(x: 85.5, y: 39), end: CGPoint(x: 85.5, y: 124), options: [])
        context.restoreGState()
        UIColor.black.setStroke()
        oval6Path.lineWidth = 2
        oval6Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 57, y: 53, width: 57, height: 57))
        UIColor.white.setFill()
        oval3Path.fill()
        UIColor.black.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 37, y: 33, width: 97, height: 97))
        colorFail2.setStroke()
        oval4Path.lineWidth = 10
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [expr_failure, 301])
        oval4Path.stroke()
        context.restoreGState()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 50.5, y: 46, width: 70.5, height: 71))
        greenPower.setStroke()
        oval5Path.lineWidth = 10
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [expr_achive, 301])
        oval5Path.stroke()
        context.restoreGState()


        //// Star 2 Drawing
        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 86, y: 140.5))
        star2Path.addLine(to: CGPoint(x: 89.7, y: 145.9))
        star2Path.addLine(to: CGPoint(x: 95.99, y: 147.76))
        star2Path.addLine(to: CGPoint(x: 91.99, y: 152.95))
        star2Path.addLine(to: CGPoint(x: 92.17, y: 159.49))
        star2Path.addLine(to: CGPoint(x: 86, y: 157.3))
        star2Path.addLine(to: CGPoint(x: 79.83, y: 159.49))
        star2Path.addLine(to: CGPoint(x: 80.01, y: 152.95))
        star2Path.addLine(to: CGPoint(x: 76.01, y: 147.76))
        star2Path.addLine(to: CGPoint(x: 82.3, y: 145.9))
        star2Path.close()
        one.setFill()
        star2Path.fill()
        UIColor.black.setStroke()
        star2Path.lineWidth = 1
        star2Path.stroke()


        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 15, y: 70.5))
        star3Path.addLine(to: CGPoint(x: 18.7, y: 75.9))
        star3Path.addLine(to: CGPoint(x: 24.99, y: 77.76))
        star3Path.addLine(to: CGPoint(x: 20.99, y: 82.95))
        star3Path.addLine(to: CGPoint(x: 21.17, y: 89.49))
        star3Path.addLine(to: CGPoint(x: 15, y: 87.3))
        star3Path.addLine(to: CGPoint(x: 8.83, y: 89.49))
        star3Path.addLine(to: CGPoint(x: 9.01, y: 82.95))
        star3Path.addLine(to: CGPoint(x: 5.01, y: 77.76))
        star3Path.addLine(to: CGPoint(x: 11.3, y: 75.9))
        star3Path.close()
        two.setFill()
        star3Path.fill()
        UIColor.black.setStroke()
        star3Path.lineWidth = 1
        star3Path.stroke()


        //// Star 4 Drawing
        let star4Path = UIBezierPath()
        star4Path.move(to: CGPoint(x: 86, y: 2.5))
        star4Path.addLine(to: CGPoint(x: 89.7, y: 7.9))
        star4Path.addLine(to: CGPoint(x: 95.99, y: 9.76))
        star4Path.addLine(to: CGPoint(x: 91.99, y: 14.95))
        star4Path.addLine(to: CGPoint(x: 92.17, y: 21.49))
        star4Path.addLine(to: CGPoint(x: 86, y: 19.3))
        star4Path.addLine(to: CGPoint(x: 79.83, y: 21.49))
        star4Path.addLine(to: CGPoint(x: 80.01, y: 14.95))
        star4Path.addLine(to: CGPoint(x: 76.01, y: 9.76))
        star4Path.addLine(to: CGPoint(x: 82.3, y: 7.9))
        star4Path.close()
        three.setFill()
        star4Path.fill()
        UIColor.black.setStroke()
        star4Path.lineWidth = 1
        star4Path.stroke()


        //// Star 5 Drawing
        let star5Path = UIBezierPath()
        star5Path.move(to: CGPoint(x: 157, y: 70.5))
        star5Path.addLine(to: CGPoint(x: 160.7, y: 75.9))
        star5Path.addLine(to: CGPoint(x: 166.99, y: 77.76))
        star5Path.addLine(to: CGPoint(x: 162.99, y: 82.95))
        star5Path.addLine(to: CGPoint(x: 163.17, y: 89.49))
        star5Path.addLine(to: CGPoint(x: 157, y: 87.3))
        star5Path.addLine(to: CGPoint(x: 150.83, y: 89.49))
        star5Path.addLine(to: CGPoint(x: 151.01, y: 82.95))
        star5Path.addLine(to: CGPoint(x: 147.01, y: 77.76))
        star5Path.addLine(to: CGPoint(x: 153.3, y: 75.9))
        star5Path.close()
        four.setFill()
        star5Path.fill()
        UIColor.black.setStroke()
        star5Path.lineWidth = 1
        star5Path.stroke()
        
        context.restoreGState()

    }




    @objc(TrackertaskResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
