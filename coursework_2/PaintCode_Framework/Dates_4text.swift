//
//  Dates_4text.swift
//  tiz
//
//  Created by tiziano on 5/17/19.
//  Copyright Â© 2019 tz. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Dates_4text : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 144, height: 100), resizing: ResizingBehavior = .aspectFit, third: CGFloat = 0, first: CGFloat = 0, second: CGFloat = 0, last: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 144, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 144, y: resizedFrame.height / 100)


        //// Color Declarations
        let blue = UIColor(red: 0.196, green: 0.251, blue: 0.361, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 0.678, blue: 0.710, alpha: 1.000)

        //// Variable Declarations
        let third_percentage: CGFloat = -third * 25 + 59
        let linetwothirdend: CGFloat = -third * 25 + 59
        let first_percentage: CGFloat = -first * 25 + 62.62
        let linestart: CGFloat = -first * 25 + 62.62
        let second_percentage: CGFloat = -second * 25 + 62.62
        let secondline: CGFloat = -second * 25 + 62.62
        let lastbubble: CGFloat = -last * 25 + 62.62
        let lastline: CGFloat = -last * 25 + 62.62

        //// Frames
        let frameOval4 = CGRect(x: 92, y: (linetwothirdend - 9), width: 1, height: 1)
        let frameOval1 = CGRect(x: 36, y: (first_percentage - 12.62), width: 1, height: 1)
        let frameOval = CGRect(x: 120, y: (lastline - 12.62), width: 1, height: 1)
        let frameOval2 = CGRect(x: 65, y: (secondline - 12.62), width: 1, height: 1)


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 65.55, y: (second_percentage - 13.9963255208))

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -5.55, y: -3.62, width: 11, height: 11))
        blue.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 92.55, y: (third_percentage - 10.3763255208))

        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -5.55, y: -3.62, width: 11, height: 11))
        blue.setFill()
        oval3Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frameOval2.minX + 0.5, y: frameOval2.minY + 0.5))
        bezier2Path.addLine(to: CGPoint(x: frameOval4.minX + 0.5, y: frameOval4.minY + 0.5))
        blue.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Oval 1 Drawing
        context.saveGState()
        context.translateBy(x: 36.53, y: (linestart - 13.0939003906))

        let oval1Path = UIBezierPath(ovalIn: CGRect(x: -5.53, y: -4.53, width: 11, height: 11))
        blue.setFill()
        oval1Path.fill()

        context.restoreGState()


        //// Oval 4 Drawing
        context.saveGState()
        context.translateBy(x: 120.55, y: (lastbubble - 14))

        let oval4Path = UIBezierPath(ovalIn: CGRect(x: -5.55, y: -3.62, width: 11, height: 11))
        blue.setFill()
        oval4Path.fill()

        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: frameOval4.minX + 0.5, y: frameOval4.minY + 0.5))
        bezier4Path.addLine(to: CGPoint(x: frameOval.minX + 0.5, y: frameOval.minY + 0.5))
        blue.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: frameOval1.minX + 0.5, y: frameOval1.minY + 0.5))
        bezier6Path.addLine(to: CGPoint(x: frameOval2.minX + 0.5, y: frameOval2.minY + 0.5))
        blue.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 19, y: 11, width: 1, height: 48))
        green.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 20, y: 58, width: 112, height: 1))
        green.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 11, y: 34, width: 9, height: 1))
        green.setFill()
        rectangle3Path.fill()


        //// Text Drawing
        context.saveGState()
        context.translateBy(x: 26.83, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let textRect = CGRect(x: 0, y: 0, width: 31, height: 20.17)
        let textTextContent = "2019-01-01"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 5),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Text 2 Drawing
        context.saveGState()
        context.translateBy(x: 55.83, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text2Rect = CGRect(x: 0, y: 0, width: 31, height: 20.17)
        let text2TextContent = "2019-01-01"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 5),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Text 3 Drawing
        context.saveGState()
        context.translateBy(x: 82.83, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text3Rect = CGRect(x: 0, y: 0, width: 31, height: 20.17)
        let text3TextContent = "2019-01-01"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 5),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedString.Key: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Text 4 Drawing
        context.saveGState()
        context.translateBy(x: 110.83, y: 90)
        context.rotate(by: -90 * CGFloat.pi/180)

        let text4Rect = CGRect(x: 0, y: 0, width: 31, height: 20.17)
        let text4TextContent = "2019-01-01"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 5),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(Dates_4textResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
