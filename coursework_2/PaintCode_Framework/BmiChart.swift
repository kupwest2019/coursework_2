//
//  BmiChart.swift
//  tiz
//
//  Created by tiziano on 5/19/19.
//  Copyright Â© 2019 tz. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class BmiChart : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 236, height: 156), resizing: ResizingBehavior = .aspectFit, bmi: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 236, height: 156), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 236, y: resizedFrame.height / 156)


        //// Color Declarations
        let blue = UIColor(red: 0.196, green: 0.251, blue: 0.361, alpha: 1.000)
        let orange_light_light = UIColor(red: 0.988, green: 0.498, blue: 0.384, alpha: 0.400)
        let yellow2_light = UIColor(red: 0.983, green: 0.967, blue: 0.590, alpha: 0.400)
        let green_light = UIColor(red: 0.000, green: 0.678, blue: 0.710, alpha: 0.400)

        //// Variable Declarations
        let bmi_move: CGFloat = 130 * bmi + 130
        let ball_move_x: CGFloat = 130 * bmi + 22
        let ball_move_y: CGFloat = 70 - 130 * bmi

        //// Frames
        let frame = CGRect(x: (ball_move_x + 37.05), y: (ball_move_y + 61.24), width: 11.95, height: 15.71)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 37.5, y: 96, width: 168, height: 42.5))
        yellow2_light.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 37.5, y: 53, width: 168, height: 43))
        green_light.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 37.5, y: 11, width: 168, height: 42.5))
        orange_light_light.setFill()
        rectangle3Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 1.56, y: frame.minY + 2.1, width: 10, height: 10))
        blue.setFill()
        ovalPath.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 45.5, y: 148.5))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 6.21, y: frame.minY + 6.5))
        UIColor.gray.setFill()
        bezier4Path.fill()
        blue.setStroke()
        bezier4Path.lineWidth = 1
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [bmi_move, 130])
        bezier4Path.stroke()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.5, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 28.5, y: 154.5))
        bezierPath.addLine(to: CGPoint(x: 215.5, y: 154.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 182, y: 113, width: 32, height: 19)
        let text4TextContent = "under\nweight"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [
            .font: UIFont.systemFont(ofSize: 7),
            .foregroundColor: blue,
            .paragraphStyle: text4Style,
        ] as [NSAttributedString.Key: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 182, y: 23, width: 32, height: 19)
        let textTextContent = "over\nweight"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 7),
            .foregroundColor: blue,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 38, y: 0, width: 59, height: 15)
        let text2TextContent = "your BMI chart"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 7)!,
            .foregroundColor: blue,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(BmiChartResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
